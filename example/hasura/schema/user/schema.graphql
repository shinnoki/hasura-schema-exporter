schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""mutation root"""
type mutation_root {
  """
  insert data into the table: "post"
  """
  insert_post(
    """the rows to be inserted"""
    objects: [post_insert_input!]!

    """upsert condition"""
    on_conflict: post_on_conflict
  ): post_mutation_response

  """
  insert a single row into the table: "post"
  """
  insert_post_one(
    """the row to be inserted"""
    object: post_insert_input!

    """upsert condition"""
    on_conflict: post_on_conflict
  ): post
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "post"
"""
type post {
  id: uuid!
  title: String!
}

"""
Boolean expression to filter rows from the table "post". All fields are combined with a logical 'AND'.
"""
input post_bool_exp {
  _and: [post_bool_exp!]
  _not: post_bool_exp
  _or: [post_bool_exp!]
  id: uuid_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "post"
"""
enum post_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  post_pkey
}

"""
input type for inserting data into table "post"
"""
input post_insert_input {
  id: uuid
  title: String
}

"""
response of any mutation on the table "post"
"""
type post_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [post!]!
}

"""
on_conflict condition type for table "post"
"""
input post_on_conflict {
  constraint: post_constraint!
  update_columns: [post_update_column!]! = []
  where: post_bool_exp
}

"""Ordering options when selecting data from "post"."""
input post_order_by {
  id: order_by
  title: order_by
}

"""
select columns of table "post"
"""
enum post_select_column {
  """column name"""
  id

  """column name"""
  title
}

"""
placeholder for update columns of table "post" (current role has no relevant permissions)
"""
enum post_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

type query_root {
  """
  fetch data from the table: "post"
  """
  post(
    """distinct select on columns"""
    distinct_on: [post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [post_order_by!]

    """filter the rows returned"""
    where: post_bool_exp
  ): [post!]!

  """fetch data from the table: "post" using primary key columns"""
  post_by_pk(id: uuid!): post
}

type subscription_root {
  """
  fetch data from the table: "post"
  """
  post(
    """distinct select on columns"""
    distinct_on: [post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [post_order_by!]

    """filter the rows returned"""
    where: post_bool_exp
  ): [post!]!

  """fetch data from the table: "post" using primary key columns"""
  post_by_pk(id: uuid!): post
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

